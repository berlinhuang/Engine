// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: query.proto

#ifndef PROTOBUF_query_2eproto_INCLUDED
#define PROTOBUF_query_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_query_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsQueryImpl();
void InitDefaultsQuery();
void InitDefaultsAnswerImpl();
void InitDefaultsAnswer();
void InitDefaultsEmptyImpl();
void InitDefaultsEmpty();
inline void InitDefaults() {
  InitDefaultsQuery();
  InitDefaultsAnswer();
  InitDefaultsEmpty();
}
}  // namespace protobuf_query_2eproto
namespace Engine {
class Answer;
class AnswerDefaultTypeInternal;
extern AnswerDefaultTypeInternal _Answer_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Query;
class QueryDefaultTypeInternal;
extern QueryDefaultTypeInternal _Query_default_instance_;
}  // namespace Engine
namespace google {
namespace protobuf {
template<> ::Engine::Answer* Arena::Create< ::Engine::Answer>(Arena*);
template<> ::Engine::Empty* Arena::Create< ::Engine::Empty>(Arena*);
template<> ::Engine::Query* Arena::Create< ::Engine::Query>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Engine {

// ===================================================================

class Query : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Engine.Query) */ {
 public:
  Query();
  virtual ~Query();

  Query(const Query& from);

  inline Query& operator=(const Query& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Query(Query&& from) noexcept
    : Query() {
    *this = ::std::move(from);
  }

  inline Query& operator=(Query&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Query& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Query* internal_default_instance() {
    return reinterpret_cast<const Query*>(
               &_Query_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Query* other);
  friend void swap(Query& a, Query& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Query* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Query>(NULL);
  }

  Query* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Query>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Query& from);
  void MergeFrom(const Query& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Query* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string question = 3;
  int question_size() const;
  void clear_question();
  static const int kQuestionFieldNumber = 3;
  const ::std::string& question(int index) const;
  ::std::string* mutable_question(int index);
  void set_question(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_question(int index, ::std::string&& value);
  #endif
  void set_question(int index, const char* value);
  void set_question(int index, const char* value, size_t size);
  ::std::string* add_question();
  void add_question(const ::std::string& value);
  #if LANG_CXX11
  void add_question(::std::string&& value);
  #endif
  void add_question(const char* value);
  void add_question(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& question() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_question();

  // required string questioner = 2;
  bool has_questioner() const;
  void clear_questioner();
  static const int kQuestionerFieldNumber = 2;
  const ::std::string& questioner() const;
  void set_questioner(const ::std::string& value);
  #if LANG_CXX11
  void set_questioner(::std::string&& value);
  #endif
  void set_questioner(const char* value);
  void set_questioner(const char* value, size_t size);
  ::std::string* mutable_questioner();
  ::std::string* release_questioner();
  void set_allocated_questioner(::std::string* questioner);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Engine.Query)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_questioner();
  void clear_has_questioner();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> question_;
  ::google::protobuf::internal::ArenaStringPtr questioner_;
  ::google::protobuf::int64 id_;
  friend struct ::protobuf_query_2eproto::TableStruct;
  friend void ::protobuf_query_2eproto::InitDefaultsQueryImpl();
};
// -------------------------------------------------------------------

class Answer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Engine.Answer) */ {
 public:
  Answer();
  virtual ~Answer();

  Answer(const Answer& from);

  inline Answer& operator=(const Answer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Answer(Answer&& from) noexcept
    : Answer() {
    *this = ::std::move(from);
  }

  inline Answer& operator=(Answer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Answer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Answer* internal_default_instance() {
    return reinterpret_cast<const Answer*>(
               &_Answer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Answer* other);
  friend void swap(Answer& a, Answer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Answer* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Answer>(NULL);
  }

  Answer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Answer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Answer& from);
  void MergeFrom(const Answer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Answer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string solution = 4;
  int solution_size() const;
  void clear_solution();
  static const int kSolutionFieldNumber = 4;
  const ::std::string& solution(int index) const;
  ::std::string* mutable_solution(int index);
  void set_solution(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_solution(int index, ::std::string&& value);
  #endif
  void set_solution(int index, const char* value);
  void set_solution(int index, const char* value, size_t size);
  ::std::string* add_solution();
  void add_solution(const ::std::string& value);
  #if LANG_CXX11
  void add_solution(::std::string&& value);
  #endif
  void add_solution(const char* value);
  void add_solution(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& solution() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_solution();

  // required string questioner = 2;
  bool has_questioner() const;
  void clear_questioner();
  static const int kQuestionerFieldNumber = 2;
  const ::std::string& questioner() const;
  void set_questioner(const ::std::string& value);
  #if LANG_CXX11
  void set_questioner(::std::string&& value);
  #endif
  void set_questioner(const char* value);
  void set_questioner(const char* value, size_t size);
  ::std::string* mutable_questioner();
  ::std::string* release_questioner();
  void set_allocated_questioner(::std::string* questioner);

  // required string answerer = 3;
  bool has_answerer() const;
  void clear_answerer();
  static const int kAnswererFieldNumber = 3;
  const ::std::string& answerer() const;
  void set_answerer(const ::std::string& value);
  #if LANG_CXX11
  void set_answerer(::std::string&& value);
  #endif
  void set_answerer(const char* value);
  void set_answerer(const char* value, size_t size);
  ::std::string* mutable_answerer();
  ::std::string* release_answerer();
  void set_allocated_answerer(::std::string* answerer);

  // required int64 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Engine.Answer)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_questioner();
  void clear_has_questioner();
  void set_has_answerer();
  void clear_has_answerer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> solution_;
  ::google::protobuf::internal::ArenaStringPtr questioner_;
  ::google::protobuf::internal::ArenaStringPtr answerer_;
  ::google::protobuf::int64 id_;
  friend struct ::protobuf_query_2eproto::TableStruct;
  friend void ::protobuf_query_2eproto::InitDefaultsAnswerImpl();
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Engine.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Engine.Empty)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_query_2eproto::TableStruct;
  friend void ::protobuf_query_2eproto::InitDefaultsEmptyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Query

// required int64 id = 1;
inline bool Query::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Query::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Query::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Query::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Query::id() const {
  // @@protoc_insertion_point(field_get:Engine.Query.id)
  return id_;
}
inline void Query::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Engine.Query.id)
}

// required string questioner = 2;
inline bool Query::has_questioner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Query::set_has_questioner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Query::clear_has_questioner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Query::clear_questioner() {
  questioner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_questioner();
}
inline const ::std::string& Query::questioner() const {
  // @@protoc_insertion_point(field_get:Engine.Query.questioner)
  return questioner_.GetNoArena();
}
inline void Query::set_questioner(const ::std::string& value) {
  set_has_questioner();
  questioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Engine.Query.questioner)
}
#if LANG_CXX11
inline void Query::set_questioner(::std::string&& value) {
  set_has_questioner();
  questioner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Engine.Query.questioner)
}
#endif
inline void Query::set_questioner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_questioner();
  questioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Engine.Query.questioner)
}
inline void Query::set_questioner(const char* value, size_t size) {
  set_has_questioner();
  questioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Engine.Query.questioner)
}
inline ::std::string* Query::mutable_questioner() {
  set_has_questioner();
  // @@protoc_insertion_point(field_mutable:Engine.Query.questioner)
  return questioner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Query::release_questioner() {
  // @@protoc_insertion_point(field_release:Engine.Query.questioner)
  clear_has_questioner();
  return questioner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Query::set_allocated_questioner(::std::string* questioner) {
  if (questioner != NULL) {
    set_has_questioner();
  } else {
    clear_has_questioner();
  }
  questioner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), questioner);
  // @@protoc_insertion_point(field_set_allocated:Engine.Query.questioner)
}

// repeated string question = 3;
inline int Query::question_size() const {
  return question_.size();
}
inline void Query::clear_question() {
  question_.Clear();
}
inline const ::std::string& Query::question(int index) const {
  // @@protoc_insertion_point(field_get:Engine.Query.question)
  return question_.Get(index);
}
inline ::std::string* Query::mutable_question(int index) {
  // @@protoc_insertion_point(field_mutable:Engine.Query.question)
  return question_.Mutable(index);
}
inline void Query::set_question(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Engine.Query.question)
  question_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Query::set_question(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Engine.Query.question)
  question_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Query::set_question(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  question_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Engine.Query.question)
}
inline void Query::set_question(int index, const char* value, size_t size) {
  question_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Engine.Query.question)
}
inline ::std::string* Query::add_question() {
  // @@protoc_insertion_point(field_add_mutable:Engine.Query.question)
  return question_.Add();
}
inline void Query::add_question(const ::std::string& value) {
  question_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Engine.Query.question)
}
#if LANG_CXX11
inline void Query::add_question(::std::string&& value) {
  question_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Engine.Query.question)
}
#endif
inline void Query::add_question(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  question_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Engine.Query.question)
}
inline void Query::add_question(const char* value, size_t size) {
  question_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Engine.Query.question)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Query::question() const {
  // @@protoc_insertion_point(field_list:Engine.Query.question)
  return question_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Query::mutable_question() {
  // @@protoc_insertion_point(field_mutable_list:Engine.Query.question)
  return &question_;
}

// -------------------------------------------------------------------

// Answer

// required int64 id = 1;
inline bool Answer::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Answer::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Answer::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Answer::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 Answer::id() const {
  // @@protoc_insertion_point(field_get:Engine.Answer.id)
  return id_;
}
inline void Answer::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Engine.Answer.id)
}

// required string questioner = 2;
inline bool Answer::has_questioner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Answer::set_has_questioner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Answer::clear_has_questioner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Answer::clear_questioner() {
  questioner_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_questioner();
}
inline const ::std::string& Answer::questioner() const {
  // @@protoc_insertion_point(field_get:Engine.Answer.questioner)
  return questioner_.GetNoArena();
}
inline void Answer::set_questioner(const ::std::string& value) {
  set_has_questioner();
  questioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Engine.Answer.questioner)
}
#if LANG_CXX11
inline void Answer::set_questioner(::std::string&& value) {
  set_has_questioner();
  questioner_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Engine.Answer.questioner)
}
#endif
inline void Answer::set_questioner(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_questioner();
  questioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Engine.Answer.questioner)
}
inline void Answer::set_questioner(const char* value, size_t size) {
  set_has_questioner();
  questioner_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Engine.Answer.questioner)
}
inline ::std::string* Answer::mutable_questioner() {
  set_has_questioner();
  // @@protoc_insertion_point(field_mutable:Engine.Answer.questioner)
  return questioner_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Answer::release_questioner() {
  // @@protoc_insertion_point(field_release:Engine.Answer.questioner)
  clear_has_questioner();
  return questioner_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_questioner(::std::string* questioner) {
  if (questioner != NULL) {
    set_has_questioner();
  } else {
    clear_has_questioner();
  }
  questioner_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), questioner);
  // @@protoc_insertion_point(field_set_allocated:Engine.Answer.questioner)
}

// required string answerer = 3;
inline bool Answer::has_answerer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Answer::set_has_answerer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Answer::clear_has_answerer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Answer::clear_answerer() {
  answerer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_answerer();
}
inline const ::std::string& Answer::answerer() const {
  // @@protoc_insertion_point(field_get:Engine.Answer.answerer)
  return answerer_.GetNoArena();
}
inline void Answer::set_answerer(const ::std::string& value) {
  set_has_answerer();
  answerer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Engine.Answer.answerer)
}
#if LANG_CXX11
inline void Answer::set_answerer(::std::string&& value) {
  set_has_answerer();
  answerer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Engine.Answer.answerer)
}
#endif
inline void Answer::set_answerer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_answerer();
  answerer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Engine.Answer.answerer)
}
inline void Answer::set_answerer(const char* value, size_t size) {
  set_has_answerer();
  answerer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Engine.Answer.answerer)
}
inline ::std::string* Answer::mutable_answerer() {
  set_has_answerer();
  // @@protoc_insertion_point(field_mutable:Engine.Answer.answerer)
  return answerer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Answer::release_answerer() {
  // @@protoc_insertion_point(field_release:Engine.Answer.answerer)
  clear_has_answerer();
  return answerer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Answer::set_allocated_answerer(::std::string* answerer) {
  if (answerer != NULL) {
    set_has_answerer();
  } else {
    clear_has_answerer();
  }
  answerer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), answerer);
  // @@protoc_insertion_point(field_set_allocated:Engine.Answer.answerer)
}

// repeated string solution = 4;
inline int Answer::solution_size() const {
  return solution_.size();
}
inline void Answer::clear_solution() {
  solution_.Clear();
}
inline const ::std::string& Answer::solution(int index) const {
  // @@protoc_insertion_point(field_get:Engine.Answer.solution)
  return solution_.Get(index);
}
inline ::std::string* Answer::mutable_solution(int index) {
  // @@protoc_insertion_point(field_mutable:Engine.Answer.solution)
  return solution_.Mutable(index);
}
inline void Answer::set_solution(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Engine.Answer.solution)
  solution_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Answer::set_solution(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:Engine.Answer.solution)
  solution_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Answer::set_solution(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  solution_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Engine.Answer.solution)
}
inline void Answer::set_solution(int index, const char* value, size_t size) {
  solution_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Engine.Answer.solution)
}
inline ::std::string* Answer::add_solution() {
  // @@protoc_insertion_point(field_add_mutable:Engine.Answer.solution)
  return solution_.Add();
}
inline void Answer::add_solution(const ::std::string& value) {
  solution_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Engine.Answer.solution)
}
#if LANG_CXX11
inline void Answer::add_solution(::std::string&& value) {
  solution_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Engine.Answer.solution)
}
#endif
inline void Answer::add_solution(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  solution_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Engine.Answer.solution)
}
inline void Answer::add_solution(const char* value, size_t size) {
  solution_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Engine.Answer.solution)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Answer::solution() const {
  // @@protoc_insertion_point(field_list:Engine.Answer.solution)
  return solution_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Answer::mutable_solution() {
  // @@protoc_insertion_point(field_mutable_list:Engine.Answer.solution)
  return &solution_;
}

// -------------------------------------------------------------------

// Empty

// optional int32 id = 1;
inline bool Empty::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Empty::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Empty::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Empty::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Empty::id() const {
  // @@protoc_insertion_point(field_get:Engine.Empty.id)
  return id_;
}
inline void Empty::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Engine.Empty.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Engine

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_query_2eproto_INCLUDED
